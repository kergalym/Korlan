# flame effect
fragment:
    inout: |
      uniform float iTime;

    includes: |
      #pragma include "Engine/Shaders/Flame/flame_f_func.inc.glsl"

    material: |
      vec2 uv = vOutput.texcoord.xy;

      float nx = 0.0;
      float ny = 0.0;

      // Generate procedural flame texture from regular noise texture
      for (int i=1; i<ITERATIONS+1; i++)
      {
      	float ii = pow(float(i), 2.0);
      	float ifrac = float(i)/float(ITERATIONS);
      	float t = ifrac * iTime * SPEED;
      	float d = (1.0-ifrac) * DISPLACEMENT;
      	nx += noise( vec3(uv.x*ii-iTime*ifrac, uv.y*YSCALE*ii-t, 0.0), p3d_Texture0) * d * 2.0;
      	ny += noise( vec3(uv.x*ii+iTime*ifrac, uv.y*YSCALE*ii-t, iTime*ifrac/ii), p3d_Texture0) * d;
      }

      float flame = shape( vec2(uv.x+nx, uv.y+ny) );
      vec3 col = pow(flame, TIGHTNESS) * FLAMETONE;

      // Tonemapping
      col = col / (1.0+col);
      col = pow(col, vec3(1.0/2.2));
      col = clamp(col, 0.0, 1.0);

      // Drop all black pixels at the first stage
      if (col.rgb == vec3(0.0,0.0,0.0))
          discard;

      m.basecolor = col.rgb;

      //There are still some black pixels visible. This is because the texture was filtered.
      // This can be prevented by setting the texture parameters to:
      //glTexParameter(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);
      //glTexParameter(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);

