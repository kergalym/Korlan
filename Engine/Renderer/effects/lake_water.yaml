# Lake water effect.

vertex:
    inout: |
        //uniform mat4 p3d_ModelViewProjectionMatrix;
        //in vec4 p3d_Vertex;
        //in vec2 p3d_MultiTexCoord0;
        out vec2 texCoord0;
        out vec2 texCoord1;
        out vec2 texCoord2;
        out vec4 texCoord3;
        out vec4 texCoord4;
        uniform mat4 trans_model_to_world;
        uniform mat4 trans_model_to_clip_of_camera;
        uniform mat4 p3d_ModelViewMatrix;
        uniform vec4 fog;
        uniform float osg_FrameTime;
        uniform float tile;
        uniform float speed;
        uniform vec4 wave;

        out float fog_factor;

        out vec4 vpos;
        out float blend;
        out float height_scale;

        uniform sampler2D water_height;

        uniform float num_lights;
        uniform vec4 light_pos[10];
        out vec4 pointLight [10];
        uniform mat4 p3d_ViewMatrix;

    transform: |
        vec2 uv=(p3d_MultiTexCoord0.xy+vec2(osg_FrameTime*wave.x, osg_FrameTime*wave.y))*wave.z;
        blend=(sin(osg_FrameTime*0.5)+1.0)*0.5;
        vec4 h_tex=textureLod(water_height, uv, 0.0);
        float h= mix(h_tex.b, h_tex.a, blend)*wave.w;
        vec4 vert=p3d_Vertex;
        vert.z=(h*4.0);
        height_scale=vert.z*15.0;
        gl_Position = p3d_ModelViewProjectionMatrix * vert;

        texCoord0 = p3d_MultiTexCoord0*tile+osg_FrameTime*speed;
        texCoord1 = p3d_MultiTexCoord0*tile*1.77-osg_FrameTime*speed*1.77;
        texCoord2 = p3d_MultiTexCoord0;
        texCoord4 = vec4(uv.xy, 1.0, 1.0);

        vpos = p3d_ModelViewMatrix * vert;
        vec4 wpos=trans_model_to_world * vert;

        float distToEdge=clamp(pow(distance(wpos.xy, vec2(256.0, 256.0))/256.0, 4.0), 0.0, 1.0);
        float distToCamera =clamp(-vpos.z*fog.a-0.5, 0.0, 1.0);
        fog_factor=clamp(distToCamera+distToEdge, 0.0, 1.0);

        //point lights
        int iNumLights = int(num_lights);
        for (int i=0; i<iNumLights; ++i)
            {
            pointLight[i]=p3d_ViewMatrix*vec4(light_pos[i].xyz, 1.0);
            pointLight[i].w=light_pos[i].w;
            }

        vec4 camclip = trans_model_to_clip_of_camera* vert;
        texCoord3 = camclip * vec4(0.5,0.5,0.5,1.0) + camclip.w * vec4(0.5,0.5,0.5,0.0);

fragment:
    inout: |
        uniform mat3 p3d_NormalMatrix;
        uniform sampler2D reflection;
        uniform sampler2D water_norm;
        uniform sampler2D height;
        uniform sampler2D water_height;
        in vec2 texCoord0;
        in vec2 texCoord1;
        in vec2 texCoord2;
        in vec4 texCoord3;
        in vec4 texCoord4;
        uniform float water_level;
        uniform vec4 ambient;
        uniform vec4 fog;
        uniform vec3 wave;

        in float fog_factor;
        in vec4 vpos;

        in float blend;
        in float height_scale;

        in vec4 pointLight [10];
        uniform vec4 light_color[10];
        uniform float num_lights;
        uniform float z_scale;
        //out vec4 fragColor[2];
    material: |
        vec4 fog_color=vec4(fog.rgb, 1.0);
        vec4 distortion1 = normalize(texture2D(water_norm, texCoord0.xy));
        vec4 distortion2 = normalize(texture2D(water_norm, texCoord1.xy));
        vec4 normalmap=distortion1+distortion2;

        vec3 normal=vec3(0.0,0.0,1.0);
        const vec3 vLeft=vec3(1.0,0.0,0.0);
        const float pixel=0.00390625;//=1.0/256.0;
        vec2 texUV=texCoord4.xy;
        //normal vector...
        vec4 me_tex=texture2D(water_height, texUV);
        vec4 n_tex=texture2D(water_height, vec2(texUV.x,texUV.y+pixel));
        vec4 s_tex=texture2D(water_height, vec2(texUV.x,texUV.y-pixel));
        vec4 e_tex=texture2D(water_height, vec2(texUV.x+pixel,texUV.y));
        vec4 w_tex=texture2D(water_height, vec2(texUV.x-pixel,texUV.y));
        float me=mix(me_tex.r, me_tex.g, blend)+normalmap.a*0.5;
        float n=mix(n_tex.r, n_tex.g, blend);
        float s=mix(s_tex.r, s_tex.g, blend);
        float e=mix(e_tex.r, e_tex.g, blend);
        float w=mix(w_tex.r, w_tex.g, blend);

        //find perpendicular vector to norm:
        vec3 temp = normal; //a temporary vector that is not parallel to norm
        temp.x+=0.5;
        //form a basis with norm being one of the axes:
        vec3 perp1 = normalize(cross(normal,temp));
        vec3 perp2 = normalize(cross(normal,perp1));
        //use the basis to move the normal in its own space by the offset
        vec3 normalOffset = -height_scale*(((n-me)-(s-me))*perp1 - ((e-me)-(w-me))*perp2);
        normal += normalOffset;
        normal = normalize(p3d_NormalMatrix * normal);

        //TBN
        vec3 tangent=  p3d_NormalMatrix * cross(normal, vLeft);
        vec3 binormal= p3d_NormalMatrix * cross(normal, tangent);

        float h_map=texture2D(height, texCoord2.xy).r;
        if (h_map*z_scale>water_level+2.0)
            discard;
        float foam=clamp(h_map*z_scale-(water_level-4.0), 0.0, 4.0)*0.25;
        foam+=clamp((me-0.5)*4.0, 0.0, 1.0)*height_scale*0.04;
        foam=clamp(foam*normalmap.a, 0.0, 1.0);
        float facing = 1.0 -max(dot(normalize(-vpos.xyz), normalize(normal.xyz)), 0.0);

        vec3 tsnormal = (normalize(normalmap.xyz) * 2.0) - 1.0;
        vec3 N=normal.xyz;
        N.xyz *= tsnormal.z;
        N.xyz += tangent * tsnormal.x;
        N.xyz -= binormal * tsnormal.y;
        N.xyz = normalize(N.xyz);
        //do lights
        vec4 color =ambient;//+vec4(0.0, 0.135, 0.195, 1.0)*me;
        //directional =sun
        vec3 L;
        float NdotL,  specular = 0.0;
        //point lights
        float EdotR;
        float att;
        float dist;
        float light_spec;
        int iNumLights = int(num_lights);
        for (int i=0; i<iNumLights; ++i)
            {
            dist=dist=distance(vpos.xyz, pointLight[i].xyz);
            dist*=dist;
            att = clamp(1.0 - dist/(pointLight[i].w), 0.0, 1.0);
            if (att>0.0)
                {
                L = normalize(pointLight[i].xyz-vpos.xyz);
                NdotL = max(dot(N,L),0.0);
                EdotR=max(dot(reflect(-L.xyz, N.xyz), normalize(-vpos.xyz)), 0.0);
                light_spec=dot(light_color[i].rgb, vec3(0.2, 0.2, 0.2))+0.05;
                specular+=(pow(EdotR,150.0)+pow(EdotR,10.0)*0.2)*(1.0-foam)*light_spec*att;
                color += light_color[i]*att;
                }
            }
        specular*=(1.0-fog_factor);
        vec4 refl=texture2DProj(reflection, texCoord3+distortion1*distortion2*4.0);
        vec4 final=refl*facing;
        final= mix(final, vec4(0.01, 0.01, 0.02, 1.0), 0.6);
        final+=foam*((color*0.5)+0.2);
        final+=specular*color;
        float displace=(facing)+(foam);
        final.a=clamp(facing+specular, 0.9, 1.0);
        vec4 fragColor[2];
        fragColor[0]=final;
        fragColor[1] =vec4(fog_factor, 1.0,specular,0.4+(1.0-displace)*0.5);//(fog, shadow, glare, displace)

        m.basecolor = fragColor[0].rgb;
        m.basecolor += fragColor[1].rgb;
        //m.shading_model = 0; // transparency 3

