#!/usr/bin/env python3.6

"""
BSD 3-Clause License

Copyright (c) 2019, Galym Kerimbekov
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""
import panda3d.core as p3d
from panda3d.core import WindowProperties
from direct.showbase.ShowBase import ShowBase
from panda3d.core import TextNode
from pathlib import Path
from os import path
from Engine.Models.Player.korlan import Korlan
from Engine.Scenes.scene_01 import SceneOne
from Engine.Scenes.level_one import LevelOne
from Settings.Player.korlan_settings import Player
from Settings.Sound.sound import Sound
from Settings.UI.menu import Menu
from Settings.menu_settings import Graphics

import json
import sys
from sys import exit as sys_exit
import configparser
from os import mkdir
from os.path import isdir, isfile, exists

""" Engine Built-in Objects"""
GAME_DIR = str(Path.cwd())

GAME_CFG = '{0}/Korlan - Daughter of the Steppes/settings.ini'.format(str(Path.home()))
CFG_WARN_TEXT = "# THIS FILE IS AUTOGENERATED. DO NOT EDIT\n\n"
GAME_SETTINGS = configparser.ConfigParser()
GAME_SETTINGS['Main'] = {'disp_res': '1024x768',
                         'fullscreen': 'off',
                         'antialiasing': 'on',
                         'postprocessing': 'on',
                         'shadows': 'off',
                         'sound': 'on',
                         'music': 'on',
                         'sfx': 'on',
                         'language': 'english',
                         'player': 'Korlan'
                         }

GAME_SETTINGS['Keymap'] = {'forward': 'W',
                           'backward': 'S',
                           'left': 'A',
                           'right': 'D',
                           'crouch': 'C',
                           'jump': 'spacebar',
                           'use': 'E',
                           'attack': 'MOUSE1',
                           'h_attack': 'H',
                           'f_attack': 'F',
                           'block': 'MOUSE2',
                           'sword': '1',
                           'bow': '2',
                           'tengri': '3',
                           'umai': '4'
                           }

GAME_SETTINGS['Debug'] = {}
GAME_SETTINGS['Debug'] = {'set_debug_mode': 'NO',
                          'player_pos_x': '0.0',
                          'player_pos_y': '8.0',
                          'player_pos_z': '-1.09',
                          'player_rot_h': '-270.0',
                          'player_rot_p': '0.0',
                          'player_rot_r': '-0.0'
                          }

GAME_CFG_DIR = '{}/Korlan - Daughter of the Steppes'.format(str(Path.home()))
GAME_SETTINGS_FILENAME = 'settings.ini'

""" Create game config first! """
CFG_PATH = {"game_config_path": "{0}/{1}".format(GAME_CFG_DIR, GAME_SETTINGS_FILENAME)}

GAME_SETTINGS.read(GAME_CFG)
disp_res = GAME_SETTINGS['Main']['disp_res']
disp_res = disp_res.split("x")

p3d.load_prc_file_data(
    __file__,
    'window-size {0} {1}\n'.format(disp_res[0], disp_res[1])
)

p3d.load_prc_file_data(
    '',
    'window-title Korlan - Daughter of the Steppes\n'
    'show-frame-rate-meter  t\n'
    'audio-library-name p3openal_audio\n'
    'model-cache-dir Cache\n'
    'model-cache-textures t\n'
)


class Main(ShowBase):
    """ Game Parent Directory Path """

    def __init__(self):

        self.cfg_path = None

        self.manualRecenterMouse = None

        self.gfx = Graphics()

        ShowBase.__init__(self)

        self.backfaceCullingOff()

        self.props = WindowProperties()

        """ Creating same Game Directory"""

        def check_cfg(super):
            if exists('Settings/UI/cfg_path.json'):
                super.cfg_path = json.dumps({'game_config_path': '{0}/{1}'.format(
                    GAME_CFG_DIR,
                    GAME_SETTINGS_FILENAME),
                    'game_dir': '{0}'.format(GAME_DIR)})

                with open('Settings/UI/cfg_path.json', 'w') as f:
                    f.write(str(super.cfg_path))

                if not exists("{0}/{1}".format(GAME_CFG_DIR,
                                               GAME_SETTINGS_FILENAME)):

                    do_cfg(super)

                    if (isfile('Settings/UI/cfg_path.json') and
                            isfile("{0}/{1}".format(GAME_CFG_DIR,
                                                    GAME_SETTINGS_FILENAME))):

                        with open('Settings/UI/cfg_path.json', 'w') as f:
                            f.write(str(super.cfg_path))

                        try:
                            GAME_SETTINGS.read("{0}/{1}".format(GAME_CFG_DIR,
                                                                GAME_SETTINGS_FILENAME))
                            self.player_settings.set_player(GAME_SETTINGS['Main']['player'])
                        except configparser.MissingSectionHeaderError:
                            sys_exit("\nFile contains no section headers. I'm bumping file again...")
                            sys_exit("\nFile: {0}/{1}".format(GAME_CFG_DIR,
                                                              GAME_SETTINGS_FILENAME))

                            force_do_cfg(super)

                else:

                    try:
                        GAME_SETTINGS.read("{0}/{1}".format(GAME_CFG_DIR, GAME_SETTINGS_FILENAME))
                        self.player_settings.set_player(GAME_SETTINGS['Main']['player'])
                    except configparser.MissingSectionHeaderError:
                        sys_exit("\nFile contains no section headers. I'm bumping file again...")
                        sys_exit("\nFile: {0}/{1}".format(GAME_CFG_DIR, GAME_SETTINGS_FILENAME))

                        force_do_cfg(super)

                if isdir(GAME_DIR) is False:
                    mkdir(GAME_DIR)
                    do_cfg(super)
                    return True
                else:
                    do_cfg(super)
                    return True
            else:
                sys_exit("\nGame data is broken. Please, reinstall it")

        def do_cfg(super):
            if not exists('{0}/{1}'.format(GAME_CFG_DIR, GAME_SETTINGS_FILENAME)):
                mkdir(GAME_CFG_DIR)
                with open('{0}/{1}'.format(GAME_CFG_DIR, GAME_SETTINGS_FILENAME), 'w') as config_ini:
                    # Turn that setting dict to pass it further
                    config_ini.write(CFG_WARN_TEXT)
                    GAME_SETTINGS.write(config_ini)

        def force_do_cfg(super):
            if not exists('{0}/{1}'.format(GAME_CFG_DIR, GAME_SETTINGS_FILENAME)):
                mkdir(GAME_CFG_DIR)
                with open('{0}/{1}'.format(GAME_CFG_DIR, GAME_SETTINGS_FILENAME), 'w') as config_ini:
                    # Turn that setting dict to pass it further
                    GAME_SETTINGS.write(config_ini)
            else:

                with open('{0}/{1}'.format(GAME_CFG_DIR, GAME_SETTINGS_FILENAME), 'w') as config_ini:
                    # Turn that setting dict to pass it further
                    GAME_SETTINGS.write(config_ini)

        # Notice that you must not call ShowBase.__init__ (or super), the
        # render pipeline does that for you. If this is unconvenient for you,
        # have a look at the other initialization possibilities.

        # Insert the pipeline path to the system path, this is required to be
        # pipeline in a subfolder of your project, you have to adjust this.

        sys.path.insert(0, ".")
        sys.path.insert(0, "RenderPipeline")

        # Import the main render pipeline class
        from rpcore import RenderPipeline
        from rpcore import PointLight

        GAME_SETTINGS.read("{0}/{1}".format(GAME_CFG_DIR, GAME_SETTINGS_FILENAME))

        # Construct and create the pipeline
        self.render_pipeline = RenderPipeline()

        if GAME_SETTINGS['Main']['postprocessing'] == 'on':
            self.render_pipeline.pre_showbase_init()
            self.render_pipeline.create(self)

            my_light = PointLight()
            # set desired properties, see below
            self.render_pipeline.add_light(my_light)

        # Game scene loading definitions
        self.accept("escape", sys.exit)
        self.scene_one = SceneOne()
        self.korlan = Korlan()
        self.player_settings = Player()
        self.sound = Sound()
        self.text = TextNode("TextNode")

        """ Create game config first! """
        self.cfg_path = CFG_PATH

        if check_cfg(self):
            self.menu = Menu()
        elif check_cfg(self) and self.menu.load_main_menu() is 'menu_is_on':
            self.menu = Menu()
        else:
            sys_exit("\nNo game configuration file created. Please check your game log")

        self.render_type = "menu"
        self.rotateY = 0
        self.rotateX = 0
        self.scene_mode = None

        """ Sounds """
        self.sound.openal_mgr(self, GAME_DIR)

        """ Menu """

        self.menu.load_main_menu()

        # Set time of day
        if GAME_SETTINGS['Main']['postprocessing'] == 'on':
            self.render_pipeline.daytime_mgr.time = "15:25"

        """ Assets """
        # Test scene
        self.scene_one.env_load('Assets/Levels/Terrain/sky.egg',
                                GAME_DIR,
                                "MENU_MODE",
                                GAME_SETTINGS,
                                self.render,
                                "Sky",
                                [0.0, 10.0, -1.09], [0, 0, 0], [1.25, 1.25, 1.25], 'skybox')

        self.scene_one.asset_load('Assets/Levels/Terrain/tress_grass.egg',
                                  GAME_DIR,
                                  "MENU_MODE",
                                  GAME_SETTINGS,
                                  self.render,
                                  "Grass",
                                  [20.0, 10.0, -1.09], [0, 0, 0], [1.25, 1.25, 1.25])

        self.scene_one.asset_load('Assets/Levels/Environment/Nomad house/Nomad_house.egg',
                                  GAME_DIR,
                                  "MENU_MODE",
                                  GAME_SETTINGS,
                                  self.render,
                                  "Nomad_house",
                                  [1.0, 20.0, -1.09], [65, 0, 0], [1.25, 1.25, 1.25])

        self.scene_one.env_load('Assets/Levels/Terrain/ground.egg',
                                GAME_DIR,
                                "MENU_MODE",
                                GAME_SETTINGS,
                                self.render,
                                "Ground",
                                [0.0, 10.0, -1.09], [0, 0, 0], [1.25, 1.25, 1.25], 'ground')

        self.scene_one.env_load('Assets/Levels/Terrain/mountains.egg',
                                GAME_DIR,
                                "MENU_MODE",
                                GAME_SETTINGS,
                                self.render,
                                "Mountains",
                                [0.0, 20.0, -1.09], [0, 0, 0], [1.25, 1.25, 1.25], 'mountains')

        self.korlan.set_character("menu",
                                  GAME_SETTINGS,
                                  "Korlan",
                                  GAME_DIR,
                                  self.player_settings.set_player_path(GAME_DIR),
                                  self.cfg_path,
                                  self.render,
                                  "Korlan-Walking.egg")

        # self.cam.reparentTo(self.render)
        # self.cam.setPos(-8.0, -0.0, 2.0)
        # self.cam.setHpr(318.0, -2.0, 0.0)


app = Main()

if __name__ == '__main__':
    app.run()
